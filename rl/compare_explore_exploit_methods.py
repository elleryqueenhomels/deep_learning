# Compare Solutions of the Explore-Exploit Dilemma
# Bayesian Method (Thompson Sampling) vs.
# Epsilon Greedy vs. Optimistic Initial Values vs. UCB1

import numpy as np
import matplotlib.pyplot as plt
from epsilon_greedy import Bandit
from optimistic_initial_values import run_experiment as run_experiment_oiv
from ucb1 import run_experiment as run_experiment_ucb


class BayesianBandit(object):
	def __init__(self, m):
		self.m = m # true mean
		# parameters for mu - prior is N(0, 1)
		self.m0 = 0
		self.lambda0 = 1
		self.sum_x = 0 # for convenience
		self.tau = 1

	def pull(self):
		return np.random.randn() + self.m

	def sample(self):
		return np.random.randn() / np.sqrt(self.lambda0) + self.m0

	def update(self, x):
		# assume tau is 1
		# lambda = lambda0 + tau * N
		# m = (m0 * lambda0 + tau * sum(xn)) / lambda
		#   = (m0 * lambda0 + tau * sum(xn)) / (lambda0 + tau * N)
		self.lambda0 += self.tau
		self.sum_x += x
		self.m0 = self.tau * self.sum_x / self.lambda0


def run_experiment_decaying_epsilon(means, N):
	bandits = [Bandit(mean) for mean in means]

	data = np.empty(N)

	for i in range(N):
		# Epsilon-Greedy
		p = np.random.random()
		if p < 1.0 / (i + 1):
			j = np.random.choice(len(bandits))
		else:
			j = np.argmax([b.mean for b in bandits])
		x = bandits[j].pull()
		bandits[j].update(x)

		# for the plot
		data[i] = x

	cumulative_average = np.cumsum(data) / (np.arange(N) + 1)

	# plot moving average ctr
	plt.plot(cumulative_average)
	for mean in means:
		plt.plot(np.ones(N) * mean)
	plt.xscale('log')
	plt.title('Decaying Epsilon-Greedy')
	plt.show()

	for i, b in enumerate(bandits):
		print('Bandit %d mean: %f' % (i, b.mean))

	return cumulative_average


def run_experiment(means, N):
	bandits = [BayesianBandit(mean) for mean in means]

	data = np.empty(N)

	for i in range(N):
		# Bayesian Method (Thompson Sampling)
		j = np.argmax([b.sample() for b in bandits])
		x = bandits[j].pull()
		bandits[j].update(x)

		# for the plot
		data[i] = x

	cumulative_average = np.cumsum(data) / (np.arange(N) + 1)

	# plot moving average ctr
	plt.plot(cumulative_average)
	for mean in means:
		plt.plot(np.ones(N) * mean)
	plt.xscale('log')
	plt.title('Bayesian Method (Thompson Sampling)')
	plt.show()

	return cumulative_average


if __name__ == '__main__':
	eps = run_experiment_decaying_epsilon([1.0, 2.0, 3.0], 100000)
	oiv = run_experiment_oiv([1.0, 2.0, 3.0], 100000)
	ucb = run_experiment_ucb([1.0, 2.0, 3.0], 100000)
	bayes = run_experiment([1.0, 2.0, 3.0], 100000)

	# log scale plot
	plt.plot(eps, label='decaying-epsilon')
	plt.plot(oiv, label='optimistic')
	plt.plot(ucb, label='ucb1')
	plt.plot(bayes, label='bayesian')
	plt.legend()
	plt.xscale('log')
	plt.title('Decaying Epsilon vs. OIV vs. UCB1 vs. Bayesian')
	plt.show()

	# linear plot
	plt.plot(eps, label='decaying-epsilon')
	plt.plot(oiv, label='optimistic')
	plt.plot(ucb, label='ucb1')
	plt.plot(bayes, label='bayesian')
	plt.legend()
	plt.title('Decaying Epsilon vs. OIV vs. UCB1 vs. Bayesian')
	plt.show()

